import UIKit // comprend Foundation et les √©l√©ments UI pour la programmation
/*
 Commentaire de plusieurs lignes
 */
var greeting = "Hello, playground"
var age = 18

print(greeting + " !" , "Je suis pr√™t") // les + et les , pour ajouter mais pas les points√í
print("J'ai \(age) ans.") // /() affiche en cha√Æne de caract√®res√í

// Constantes et variable
var first:Int = 1
print(first)
first = 45
print(first)
let constante:String = "Peux-tu modifier ceci ?"
print(constante)
//constante = "C'est impossible de changer une constante"
// Le tyoe inference est optionnel consiste √† retrouer le type utiliser dans la valeur, nonobstant, pour les nombres, il peut √™tre n√©cesssaire de stipuler Int, Float, Double ; √ßa peut √™tre confu celon la valeur de base.
var infered1 = 68
//infered1 = "Hi! // Impossible car il a inf√©rer que c'est un entier. Ne √™tre qu'un entier
infered1 = 74
/*
 La convention de nommage permet l'uniformit√© d'un d√©veloppeur √† l'autre
 Un nom de var et de let doit √™tre claire, d√©bute par une minuscule ou _ pour les variables priv√©es et utilise le camelCase
 Et souvent en anglais
*/
var playerName = "John DOE"
// Le point virgule n'est utile que s'il y a plusieur d√©clarations sur la m√™me ligne
let name = "Grang√©" ; let firstname = "Jean-Christophe" ; print (firstname , name)
/*
 Les nombres entiers
 sont sign√©s signed Int
 ou non sign√©s unsigned Uint
 ce dernier ne peut pas √™tre n√©gatif
 Les nombres sont en 8, 16, 32 et 64 bits ce qui influence la valeur maximale
 Il n'est g√©n√©ralement pas d'usage de sp√©cifier la taille d'un Int (Int32), pour qu'il puissent op√©r√©s entre eux
 */
var positionClassement:Int = 3
var voitureKilometrage = 75032
var joursAvantLesVacances = -60
//var jourAvantLaRentr√©e:UInt = -120
var jourAvantLaRentr√©e:UInt = 120
/*
 Les nombres d√©cimaux
 le float √† 32 bits
 le double √† 64 bits
 sans pr√©cision du type c'est un double
 s'agissant de la typographie anglaise, ont utilise un . et pas de ,
 */
let nbFloat:Float = 354.432
let nbDouble:Double = 43.6666
//let addition = nbFloat + nbDouble // est impossible en l'√©tat
/*
 La conversion des types
 Int vers Float, Double vers Int, ...
 */
let additionInt:Int = positionClassement + Int(voitureKilometrage)
print(additionInt)
let additionIntDouble = additionInt + Int(nbDouble) // caster nbDouble en Int
print(additionIntDouble)
let additionDoubleInt = Double(additionInt) + nbDouble
print(additionDoubleInt)
let additionFloat = Float(additionInt) + nbFloat
print(additionFloat)
/*
 Les strings
 Sur plusieurs lignes, elles contienent 3 guillemet
 */
var phrase:String = "Salut les codeurs." // la valeur n'est pas obligatoire mais plus rigoureuse pour √©viter les erreurs
var aMettreUlterieurement:String
//print(aMettreUlterieurement) // est une erreur car elle n'est pas initialis√©e
aMettreUlterieurement = "Salut."
print(aMettreUlterieurement)
let aMettrePlusTard:String // idem n'est ne peut pas √™tre chang√©e
aMettrePlusTard = "Tu es en retard."
print(phrase , aMettreUlterieurement , aMettrePlusTard)
//aMettrePlusTard = "Non je suis √† l'heure" // impossible d√©j√† initialis√©e
var docstring = """
Ceci est une docstring.
Cela permet d'afficher un texte ou un dialogue dans un programme sur plusieurs lignes.
Ces trois lignes doivent appara√Ætres dans la console.
"""
print(docstring)
// Une string sans valeur est NULL donc fait provoque un crash, mieux vaut l'initialiser vide et utiliser un constructeur de classe
// La mutabilit√© des string peut √©tablie de deux fa√ßons
var personne = "Jean"
personne += "-Christophe GRANG√â" // permet l'ajout
print(personne)
// La cocat√©nation
var premon1 = "Jean"
var prenom2 = "Christophe"
var nom = "GRANG√â"
var nomComplet = premon1 + prenom2 + nom // L√† nom plus, il n'y a pas d'espace
print(nomComplet)
var espace = " "
var nomComplet1 = premon1 + espace + prenom2 + espace + nom
print(nomComplet1)
// La sting d'interpolation
var metier = "romancier"
var interplationPresentation = "Hello, Je suis \(firstname) \(name), \(metier) et j'ai \(age) ans."
print(interplationPresentation)
// Acc√©der √† tous les caract√®res d'une cha√Æne
// √Ä chaque passage une constante lettre sera cr√©e
for lettre in nomComplet1 {
    print(lettre) // tout est en 1 colonne dans le console
}
// Comprer les caract√®res d'une cha√Æne
print("La variable comporte \(nomComplet.count) lettres.") // la fonction count compte aussi les √©ventuels espaces
// tout en minuscule
let low = docstring.lowercased() // il y a des parenth√®ses ; c'est une m√©thode
print(low)
// tout en majuscule
let upper = docstring.uppercased()
print(upper)
// premi√®re lettre capitale
let cap = docstring.capitalized // pas de parenth√®se ; c"est une propri√©t√©
print(cap)
//Concid√©rer le guillemet comme faisant partie de la cha√Æne, c'est l'√©chapement "escaping" de caract√®re
var citation = "\"L'am√©lioration continue vaut mieux que la perfection retard√©e.\" Marc TWAINE"
print(citation)
// Remplacer des mots
let interdit = "vert"
let sentennce = "L'arbre est bien vert"
let newSentence = sentennce.replacingOccurrences(of: interdit, with: "(le vocable est sensur√©)")
print(newSentence)
// Metre des √©moticones (ctrl + cmd + aspace)
var emoji = "üòÄ"
print(emoji)
// Aficher la prmi√®re lettre d'un mot avec la propir√©t√© first
print(interdit.first)
