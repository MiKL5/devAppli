import UIKit // comprend Foundation et les √©l√©ments UI pour la programmation
/*
 Commentaire de plusieurs lignes
 */
var greeting = "Hello, playground"
var age = 18

print(greeting + " !" , "Je suis pr√™t") // les + et les , pour ajouter mais pas les points√í
print("J'ai \(age) ans.") // /() affiche en cha√Æne de caract√®res√í

// Constantes et variable
var first:Int = 1
print(first)
first = 45
print(first)
let constante:String = "Peux-tu modifier ceci ?"
print(constante)
//constante = "C'est impossible de changer une constante"
// Le tyoe inference est optionnel consiste √† retrouer le type utiliser dans la valeur, nonobstant, pour les nombres, il peut √™tre n√©cesssaire de stipuler Int, Float, Double ; √ßa peut √™tre confu celon la valeur de base.
var infered1 = 68
//infered1 = "Hi! // Impossible car il a inf√©rer que c'est un entier. Ne √™tre qu'un entier
infered1 = 74
/*
 La convention de nommage permet l'uniformit√© d'un d√©veloppeur √† l'autre
 Un nom de var et de let doit √™tre claire, d√©bute par une minuscule ou _ pour les variables priv√©es et utilise le camelCase
 Et souvent en anglais
*/
var playerName = "John DOE"
// Le point virgule n'est utile que s'il y a plusieur d√©clarations sur la m√™me ligne
let name = "Grang√©" ; let firstname = "Jean-Christophe" ; print (firstname , name)
/*
 Les nombres entiers
 sont sign√©s signed Int
 ou non sign√©s unsigned Uint
 ce dernier ne peut pas √™tre n√©gatif
 Les nombres sont en 8, 16, 32 et 64 bits ce qui influence la valeur maximale
 Il n'est g√©n√©ralement pas d'usage de sp√©cifier la taille d'un Int (Int32), pour qu'il puissent op√©r√©s entre eux
 */
var positionClassement:Int = 3
var voitureKilometrage = 75032
var joursAvantLesVacances = -60
//var jourAvantLaRentr√©e:UInt = -120
var jourAvantLaRentr√©e:UInt = 120
/*
 Les nombres d√©cimaux
 le float √† 32 bits
 le double √† 64 bits
 sans pr√©cision du type c'est un double
 s'agissant de la typographie anglaise, ont utilise un . et pas de ,
 */
let nbFloat:Float = 354.432
let nbDouble:Double = 43.6666
//let addition = nbFloat + nbDouble // est impossible en l'√©tat
/*
 La conversion des types
 Int vers Float, Double vers Int, ...
 */
let additionInt:Int = positionClassement + Int(voitureKilometrage)
print(additionInt)
let additionIntDouble = additionInt + Int(nbDouble) // caster nbDouble en Int
print(additionIntDouble)
let additionDoubleInt = Double(additionInt) + nbDouble
print(additionDoubleInt)
let additionFloat = Float(additionInt) + nbFloat
print(additionFloat)
/*
 Les strings
 Sur plusieurs lignes, elles contienent 3 guillemet
 */
var phrase:String = "Salut les codeurs." // la valeur n'est pas obligatoire mais plus rigoureuse pour √©viter les erreurs
var aMettreUlterieurement:String
//print(aMettreUlterieurement) // est une erreur car elle n'est pas initialis√©e
aMettreUlterieurement = "Salut."
print(aMettreUlterieurement)
let aMettrePlusTard:String // idem n'est ne peut pas √™tre chang√©e
aMettrePlusTard = "Tu es en retard."
print(phrase , aMettreUlterieurement , aMettrePlusTard)
//aMettrePlusTard = "Non je suis √† l'heure" // impossible d√©j√† initialis√©e
var docstring = """
Ceci est une docstring.
Cela permet d'afficher un texte ou un dialogue dans un programme sur plusieurs lignes.
Ces trois lignes doivent appara√Ætres dans la console.
"""
print(docstring)
// Une string sans valeur est NULL donc fait provoque un crash, mieux vaut l'initialiser vide et utiliser un constructeur de classe
// La mutabilit√© des string peut √©tablie de deux fa√ßons
var personne = "Jean"
personne += "-Christophe GRANG√â" // permet l'ajout
print(personne)
// La cocat√©nation
var premon1 = "Jean"
var prenom2 = "Christophe"
var nom = "GRANG√â"
var nomComplet = premon1 + prenom2 + nom // L√† nom plus, il n'y a pas d'espace
print(nomComplet)
var espace = " "
var nomComplet1 = premon1 + espace + prenom2 + espace + nom
print(nomComplet1)
// La sting d'interpolation
var metier = "romancier"
var interplationPresentation = "Hello, Je suis \(firstname) \(name), \(metier) et j'ai \(age) ans."
print(interplationPresentation)
// Acc√©der √† tous les caract√®res d'une cha√Æne
// √Ä chaque passage une constante lettre sera cr√©e
for lettre in nomComplet1 {
    print(lettre) // tout est en 1 colonne dans le console
}
// Comprer les caract√®res d'une cha√Æne
print("La variable comporte \(nomComplet.count) lettres.") // la fonction count compte aussi les √©ventuels espaces
// tout en minuscule
let low = docstring.lowercased() // il y a des parenth√®ses ; c'est une m√©thode
print(low)
// tout en majuscule
let upper = docstring.uppercased()
print(upper)
// premi√®re lettre capitale
let cap = docstring.capitalized // pas de parenth√®se ; c"est une propri√©t√©
print(cap)
//Concid√©rer le guillemet comme faisant partie de la cha√Æne, c'est l'√©chapement "escaping" de caract√®re
var citation = "\"L'am√©lioration continue vaut mieux que la perfection retard√©e.\" Marc TWAINE"
print(citation)
// Remplacer des mots
let interdit = "vert"
let sentennce = "L'arbre est bien vert"
let newSentence = sentennce.replacingOccurrences(of: interdit, with: "(le vocable est sensur√©)")
print(newSentence)
// Metre des √©moticones (ctrl + cmd + aspace)
var emoji = "üòÄ"
print(emoji)
// Aficher la prmi√®re lettre d'un mot avec la propir√©t√© first
print(interdit.first)
/*
 Les bool√©ens
 servent souvent
 pour v√©rifier des valeurs par exemple
 Il y a plusieurs mani√®res de changer un bool√©en
 == v√©rifi l'√©galit√©
*/
var ceCoursEtCooll:Bool = true
var jePrefereLireUnLivre = false
print(ceCoursEtCooll)
print(jePrefereLireUnLivre)
jePrefereLireUnLivre = !jePrefereLireUnLivre
print(jePrefereLireUnLivre)
ceCoursEtCooll.toggle()
print(ceCoursEtCooll)
var isRealName = personne == "Matthieu"
print(isRealName)
/*
 Les tuples
 Est un groupe de plusieurs valeurs, dans une unique valeur.
 Elles peuvent √™tres de n'importe quel type et pas forc√©ment les m√™mes
 D√©finies entre parenth√®ses et s√©par√©es pas les virgules
 L'erreur 404 est issue d'un tuple
 */
let httpStatus:(Int , String) = (404 , "Page non trouv√©e")
print(httpStatus)
print(httpStatus.0) // 404
let status:(isAlive:Bool , lives:Int) = (true , 5)
print(status)
print(status.isAlive) // Plus clair
let (code , message) = httpStatus
print(code)
print(message)
let (_ , msg) = httpStatus
print(msg)
/* 
 Les tableaux
 Les valeur sont entre crochets et s√©par√©s par des virgules
 L'initialisation peut se faire via des parenth√®ses, pour signifier de le cr√©er
 ou avec des crochets vides
 Cela permet de compter, r√©cup√©er un √©l√©ment par son index, ajouter, supprimer, v√©rifier s'il est vide, le parcourir via une boucle,
*/
var premiereListeOrdonee = [3 , 54 , 32 , 87] // Il est mieux de mettre le type [any ou autre entres crochets]
var listeMultiple:Any = [28 , "Jean" , true] // Le type any,permet l'h√©t√©rog√©n√©it√©, nonobstant, ce n'est pas conseill√©
// Compter
print(premiereListeOrdonee.count)
print(premiereListeOrdonee.first)
print(premiereListeOrdonee.last)
print(premiereListeOrdonee.isEmpty)
var secondeListeOrdonee:[Any] = []
print(secondeListeOrdonee.last)
print(secondeListeOrdonee.isEmpty)
// Parcourir en bouclant
var etudiants = ["Sophie" , "Jean" , "Georges" , "Annie" , "Sylvain" , "C√©line"]
for etudiant in etudiants {
    // print("Etudiant nomm√© :\(etudiants)") // non car ils sont tous lit√©s dans la ligne
    print("Etudiant nomm√© :\(etudiant)")
}
// Index
// Un tableau est une liste ordonn√©e, chaque √©l√©ments est d√©fini par son index qui d√©bute √† 0
    // R√©pcup√©r√© par l'index
let firstStudent = etudiants[0] // Sophie
print(firstStudent)
let lastStudent = etudiants[5] // C√©line
print(lastStudent)
print(etudiants.count) // 6
print(etudiants[etudiants.count-1]) // C√©line
    // Ajouter au tableau
etudiants.append("Bertrand")
print(etudiants)
etudiants.append(contentsOf: ["Tic" , "Tac"])
print(etudiants)
    // Ins√©rer dans un tableau (avec un index)
etudiants.insert("Matththieu", at: 3)
print(etudiants)
etudiants.insert(contentsOf: ["Catarine" , "Yuri"], at: 1)
print(etudiants)
    // Concat√©nation
etudiants += ["Billy" , "Will"]
print(etudiants)
    // Supprimer
etudiants.removeFirst()
print(etudiants)
etudiants.removeLast()
print(etudiants)
    // Supprimer avec l'index
    // supprimer le 4e
etudiants.remove(at: 4)
print(etudiants)
    // Charcher l'index par rapport √† Sylvain
let index = etudiants.firstIndex(where: {$0 == "Sylvain"})
if  index != nil { // pour enlev√© Sylvain
    etudiants.remove(at: index!)
}
print(etudiants)
etudiants.removeAll()
print(etudiants)
etudiants=[]
print(etudiants)
// Les dictionnaires
// Listes analogues aux tableaux, cependant, ils ne sont pas ordonn√©es, inaccessible par un index ou une cl√©
// Ils contienent ["une cl√© et": une valeur chiffr√©e ou non]
// Ils stockent une liste d'√©l√©ments entre crochets, doivent avoir le m√™me type, (isEmpty est l'une des similutudes)
var firstDico:[Int:String] = [1:"Maria" , 2:"John" , 3:"Anna"]
print(firstDico)
var dicoVide: [String:Bool]=[:]
var dicoVide1 = [String:Float]()
var dicoVide2 = Dictionary<String , String>()
print(dicoVide)
print(dicoVide1)
print(dicoVide2)
var courseDico:[String:Bool]=["Carotte":true , "Aubergine":false , "Fraise":true , "Tomates":false , "Poivrons rouges":false]
print(courseDico)
print(courseDico.count)
print(courseDico.isEmpty)
for(aliment , achete) in courseDico {
    print("\(aliment) a √©t√© achet√©: \(achete)")
}
// print(courseDico.first) // impossible ; il n'y a pas d'index
    // R√©cup√©rer sans index
print(courseDico["Tomate"])
courseDico["Tomates"] = true
print(courseDico)
courseDico.updateValue(true, forKey: "Beetroots")
print(courseDico)
courseDico["Chocolat noire"]
print(courseDico)
    // Supprimer
courseDico.removeValue(forKey: "Aubergine")
print(courseDico)
courseDico.removeAll()
print(courseDico)
// Les optionnels
// Swift est un langage sensible, si une variable est vide, l'application crash
// L'optionnel N'EST PAS UN TYPE, c'est une fa√ßon de permette √† une variable de ne pas avoir de valeur
// un ? est ajouter apr√©s le type de variable
var enfants:Int?
print(enfants)
enfants=2  // Si une quantit√© n'est pas d√©finie, il y aura un crash
print(enfants!) // avec le point d'exclammation, elle n'est plus optionnnelle // il faut d√©baller de mani√®re s√ªr un optionnel
// LES OP√âRATEURS
// Symbole v√©rifiant, modifiant ou combinant des valeurs.
// Les op√©rateurs peuvent √™tres unaires pour une valeur, binaire pour deux et ternaire pour troix
// Unaire op√©rant sur une cible est pr√©fixe, s'il est avant la valeur et suffixe, s'il est placer apr√®s
// Binaire op√©re sur deux cibles ; il est entre les valeurs
// Ternaire op√©re sur trois cibles, Swift a juste l'op√©rateur conditionnel (valeur1 ? valeur2 : valeur3)
    // Les op√©rateurs d'assignation
